---
# tasks file for MongoDB_ReplicaSet
  - name: Add repository
    yum_repository:
      name: mongodb-org-3.4
      description: Official MongoDB 3.4 yum repo
      baseurl: https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/
      gpgcheck: 1
      gpgkey: https://www.mongodb.org/static/pgp/server-3.4.asc

  - name: Install MongoDB packages on the shard servers
    yum:
      name: ["mongodb-org-server",
             "mongodb-org-shell",
             "mongodb-org-tools"]
      enablerepo: "mongodb-org-3.4"
      state: "installed"

  - name: Install additional packages
    yum:
      name: "{{ additional_packages }}"
      state: installed

  - name: Install additional python packages
    pip:
      name: "{{ additional_python_packages }}"
      state: present

  - name: Ensure files and directories are owned by mongod
    file:
      path: ["/var/log/mongodb/", "/var/lib/mongo", "/var/run/mongodb/mongod.pid"]
      owner: "mongod"
      group: "mongod"
      recurse: "yes"

  - name: Generate /etc/hosts file
    template:
      src: templates/hosts.j2
      dest: /etc/hosts
    when: ansible_managed_hosts_file == True

  - name: Copy mongod config file to hosts
    template:
      src: templates/mongod.conf.j2
      dest: /etc/mongod.conf
      backup: yes
      owner: mongod
      group: mongod
      mode: 0644

  - name: Ensure mongod service is running
    service:
      name: "mongod"
      state: "started"
      enabled: yes

  - name: Give mongod daemon a little time
    pause:
      seconds: 30

  - name: Copy RS Setup Script to lead node of each shard
    template:
      src: templates/rs_init.j2
      dest: "{{ mongodb_replicaset_setup_script }}"
    when: groups.mongod.index(inventory_hostname) == 0
    #with_items: groups.mongod # groups['groupname'] is a hash, must use groups.groupname for a list

  - name: Execute rs Setup Script on each lead node_name
    shell: mongo {{ mongodb_replicaset_setup_script }} && touch ~/rs.success
    args:
      creates: ~/rs.success
    register: rs
    when: groups.mongod.index(inventory_hostname) == 0

  - debug:
      var: rs

  - name: Create MongoDB admin user
    mongodb_user:
      database: admin
      name: "{{ mongodb_admin_user }}"
      password: "{{ mongodb_admin_password }}"
      roles: ["root"]
      state: present
    run_once: true

  - name: Create MongoDB application users
    mongodb_user:
      login_user: "{{ mongodb_admin_user }}"
      login_password: "{{ mongodb_admin_password }}"
      database: "{{ item['db'] }}"
      name: "{{ item['name'] }}"
      password: "{{ item['password'] }}"
      roles: "{{ item['roles'] }}"
      state: present
    with_items:
      - "{{ mongodb_user_dict_list }}"
    run_once: true

    
